import subprocess
import re
import hashlib

class handleFile(object):

    @staticmethod
    def saveFile(data, path):
        destination =  open('{}{}'.format(path, data.name), 'wb+')
        for chunk in data.chunks():
            destination.write(chunk)

        destination.close()

#improve this to get file locations and path
class opcodeFile(object):
    #only an example to extract objcode with objdump
    @staticmethod
    def opcode(path):
        #subprocess.run executes a cmd command : ['.\objdump.exe', '-d','7zFM.exe']
        out = subprocess.run(['.\objdump.exe', '-d','7zFM.exe'], stdout=subprocess.PIPE, shell=True).stdout.decode().splitlines()
        r = []
        for o in out:
            i = re.findall(r'\d*:\t.*\t(.*?)\s', o)
            if i:
                r.append(i[0])

class hashTable(object):
    """This class is responsible to extract the hash of a file"""
    def __init__(self, path):
        md5 = hashlib.md5()
        sha256 = hashlib.sha256()
        with open(path, 'rb') as afile:
            buf = afile.read()
            while len(buf) > 0:
                md5.update(buf)
                sha256.update(buf)
                buf = afile.read()
            afile.close()

        self.md5 = md5.hexdigest()
        self.sha256 = sha256.hexdigest()

    def hashMd5(self):
        return self.md5

    def hash256(self):
        return self.sha256
