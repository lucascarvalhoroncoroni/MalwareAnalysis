from django.shortcuts import render
from django.http import HttpResponseRedirect
from .forms import *
from .tools import *
from .models import *

#view from upload template
def uploadView(request):
    if request.method == 'POST':
        #this is a simple way, the next step is to add it to the model
        form = UploadSuspiciousFileForm(request.POST, request.FILES)
        if form.is_valid():
            HandleFile.saveFile(request.FILES['fileUpload'], './SFAnalytics/DataBase/Uploads/')
            return HttpResponseRedirect('/SFAnalytics/upload/')
    else:
        form = UploadSuspiciousFileForm()

    return render(request, 'SFAnalytics/uploadTemplate.html', {'form' : form})

def uploadDataBaseView(request):
    if request.method == 'POST':
        form = UploadDataBaseForm(request.POST, request.FILES)
        malwaresPath = './SFAnalytics/DataBase/Malwares/'
        softwaresPath = './SFAnalytics/DataBase/Softwares/'
        if form.is_valid():
            #Cleaning DataBase
            OpCodeList.objects.all().delete()
            DllList.objects.all().delete()
            StringList.objects.all().delete()
            EntryFile.objects.all().delete()
            #HashList to don't repeat a file
            hashList = []
            for m in request.FILES.getlist('malwareUpload'):
                HandleFile.saveFile(m, malwaresPath)
                completePath = '{}{}'.format(malwaresPath, m.name)
                h = HashTable(completePath)
                #Avoiding reapeated files
                if nonRepeat(h, hashList):
                    addLearn(m, malwaresPath, True)
                    hashList.append(h)
            for s in request.FILES.getlist('softwareUpload'):
                HandleFile.saveFile(s, softwaresPath)
                completePath = '{}{}'.format(softwaresPath, s.name)
                h = HashTable(completePath)
                #Avoiding reapeated files
                if nonRepeat(h, hashList):
                    addLearn(s, softwaresPath, False)
                    hashList.append(h)
            return HttpResponseRedirect('/admin/')
    else:
        form = UploadDataBaseForm()
    return render(request, 'SFAnalytics/uploadDataBaseTemplate.html', {'form': form})

#Function to don't add a repeated file
def nonRepeat(hashFile, hashList):
    for h in hashList:
        if h.getHashMd5() == hashFile.getHashMd5() and h.getHashSha256() == hashFile.getHashSha256():
            return False
    return True

#This is to handle the addition of a string to DB
#Receives a string object
def handleStrings(strings):
    # Getting strings from DataBase, this makes things faster
    dataBaseStrings = StringList.objects.all()
    fileStrings = strings.getRandStrings()
    i = len(fileStrings) - 1
    idNumber = len(dataBaseStrings)
    while i >= 0:
        if len(fileStrings[i]) > 250:
            i-=1
            continue
        j = len(dataBaseStrings) - 1
        while j >= 0:
            if dataBaseStrings[j].string == fileStrings[i]:
                  break
            j-=1
        #If j is -1, theres no equal value on DB.
        if j == -1:
            idNumber+=1
            stringItem = StringList(id=idNumber,string=fileStrings[i])
            stringItem.save()
        i-=1

#This is to handle the addition of a opcode to DB
#Receives a opcode object
def handleOpCodes(opcodes):
    #Getting opcodes from DataBase
    opcodesInDataBase = OpCodeList.objects.all()
    idNumber = len(opcodesInDataBase)
    for opInfo in opcodes.getOperations():
        if len(opInfo.op) > 10:
            continue
        j = len(opcodesInDataBase) - 1
        while j >= 0:
            if opInfo.op == opcodesInDataBase[j].instruction:
                break
            j-=1
        #If j is -1, theres no equal value on DB.
        if j == -1:
            idNumber+=1
            op = opInfo.op
            opItem = OpCodeList(id=idNumber,instruction=op)
            opItem.save()

#This is to handle the addition of a dll to DB
#Receives a dll list
def handleDlls(dlls):
    dllsInDataBase = DllList.objects.all()
    idNumber = len(dllsInDataBase)
    for dll in dlls:
        #Don't accept dll name lengths higher than 100 bytes
        if len(dll) > 100:
            continue
        j = len(dllsInDataBase) - 1
        while j >= 0:
            if dll == dllsInDataBase[j].name:
                break
            j-=1
        if j == -1:
            idNumber+=1
            dllItem = DllList(id=idNumber, name=dll)
            dllItem.save()

#This function handles each file uploaded for learning
def addLearn(data, path, malwareLabel):
    path = '{}{}'.format(path, data.name)
    pe = PEHandle(path)
    fileHashs = HashTable(path)
    opcodes = OpCodeFile(path)
    strings = Strings(path)
    #Saving entry file
    entry = EntryFile(hashMd5=fileHashs.getHashMd5(), hashSha256=fileHashs.getHashSha256(), malware=malwareLabel,
                      dataSectionEntropy=pe.getDataSectionEntropy(), textSectionEntropy=pe.getTextSectionEntropy())
    entry.save()
    # Getting strings from DataBase, this makes things faster
    dataBaseStrings = StringList.objects.all()
    fileStrings = strings.getStrings()
    # Adding strings to StringList
    handleStrings(strings)
    # Adding opcodes to OpCodeList
    handleOpCodes(opcodes)
    # Adding dlls to DllList
    handleDlls(pe.getDlls())
