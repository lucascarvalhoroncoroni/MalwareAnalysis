from django.shortcuts import render
from django.http import HttpResponseRedirect
from .forms import *
from .tools import *
from .models import *

#view from upload template
def uploadView(request):
    if request.method == 'POST':
        #this is a simple way, the next step is to add it to the model
        form = UploadSuspiciousFileForm(request.POST, request.FILES)
        if form.is_valid():
            HandleFile.saveFile(request.FILES['fileUpload'], './SFAnalytics/DataBase/Uploads/')
            return HttpResponseRedirect('/SFAnalytics/upload/')
    else:
        form = UploadSuspiciousFileForm()

    return render(request, 'SFAnalytics/uploadTemplate.html', {'form' : form})

def uploadDataBaseView(request):
    if request.method == 'POST':
        form = UploadDataBaseForm(request.POST, request.FILES)
        malwaresPath = './SFAnalytics/DataBase/Malwares/'
        softwaresPath = './SFAnalytics/DataBase/Softwares/'
        if form.is_valid():
            #Cleaning DataBase
            OpCodeList.objects.all().delete()
            DllList.objects.all().delete()
            StringList.objects.all().delete()
            EntryFile.objects.all().delete()
            #HashList to don't repeat a file
            hashList = []
            for m in request.FILES.getlist('malwareUpload'):
                HandleFile.saveFile(m, malwaresPath)
                completePath = '{}{}'.format(malwaresPath, m.name)
                h = HashTable(completePath)
                #Avoiding reapeated files
                if nonRepeat(h, hashList):
                    addLearn(m, malwaresPath, True)
                    hashList.append(h)
            for s in request.FILES.getlist('softwareUpload'):
                HandleFile.saveFile(s, softwaresPath)
                completePath = '{}{}'.format(softwaresPath, s.name)
                h = HashTable(completePath)
                #Avoiding reapeated files
                if nonRepeat(h, hashList):
                    addLearn(s, softwaresPath, False)
                    hashList.append(h)
            return HttpResponseRedirect('/SFAnalytics/uploadDataBase/')
    else:
        form = UploadDataBaseForm()
    return render(request, 'SFAnalytics/uploadDataBaseTemplate.html', {'form': form})

#Function to don't add a repeated file
def nonRepeat(hashFile, hashList):
    for h in hashList:
        if h.getHashMd5() == hashFile.getHashMd5() and h.getHashSha256() == hashFile.getHashSha256():
            return True
    return False

#This function handles each file uploaded for learning
def addLearn(data, path, malwareLabel):
    path = '{}{}'.format(path, data.name)
    pe = PEHandle(path)
    fileHashs = HashTable(path)
    opcodes = OpCodeFile(path)
    strings = Strings(path)
    entry = EntryFile(hashMd5=fileHashs.getHashMd5(), hashSha256=fileHashs.getHashSha256(), malware=malwareLabel,
                      dataSectionEntropy=pe.getDataSectionEntropy(), textSectionEntropy=pe.getTextSectionEntropy())
    entry.save()
    # Adding strings to string list
    for s in strings.getStrings():
        #Don't accept string lengths higher than 250 bytes
        if len(s) < 251:
            query = StringList.objects.all().filter(string__exact=s)
            #In case the query don`t match anything, it returns an query with length 0
            if len(query) == 0:
                stringItem = StringList(string=s)
                stringItem.save()

    # Adding opcodes to OpCodeList
    for opInfo in opcodes.getOperations():
        #Don't accept Operation Codes with length higher than 10 bytes
        #X86 don't have any, this is here just to avoid software crash
        op = opInfo.op
        if len(op) < 11:
            query = OpCodeList.objects.all().filter(instruction__exact=op)
            if len(query) == 0:
                opItem = OpCodeList(instruction=op)
                opItem.save()

    # Adding dlls to DllList
    for dll in pe.getDlls():
        #Don't accept dll name lengths higher than 100 bytes
        if len(dll) < 101:
            query = DllList.objects.all().filter(name__exact=dll)
            if len(query) == 0:
                dllItem = DllList(name=dll)
                dllItem.save()
