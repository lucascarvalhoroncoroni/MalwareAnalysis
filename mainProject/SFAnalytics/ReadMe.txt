#   This is an special document with important commentaries and notes
#   I've created this to write about my own classes and the ones I`m using
#   It's pretty straightfoward that I'm write because the lack of good documents
#   on this subjects, or, perhaps the lack of documents from the Dummy's point
#   of view.

        #######      ###     ##           ##       #####         ##   ##
        ##           ## ##   ##           ##     ##     ##        ## ##
        #######      ##  ##  ##           ##     ##     ##         ##
        ##           ##   ## ##      ##   ##     ##     ##         ##
        #######      ##    ####       #####        #####          ####


pefile: The pefile is a library to manipulate Portable Executable files, usually
        .exe or .dll files.

        The problem beeing solved with this is extract the PE features like,
        dlls. For those that don't know what PE is, but has some computer
        programming knowledge, here's a simple explanation: a PE is a format of
        a file, and as you should know, every file in a computer is a binary
        sequence, and please forget linux abstraction here; a PE is a sequence
        of bytes that defines a windows file that can be executed by windows,
        despite a dll being a dynamic linked library, it contains excutable
        code; back on the other subject, PE contains valiable info about the
        code that's going to be executed.

        DOS_HEADER: As C programmers know, a struct is a sequence of bytes in
                    memory, the compiler only organizes it to be accessed
                    easily, actually it is a address plus an offset depending
                    of the size of the variables, to find the correct value of
                    something. That being said, DOS_HEADER is defined by this
                    attributes:

                        e_magic     : Magic number; gives a clue to what is the
                                      file.
                        e_cblp      : Bytes on last page of file
                        e_cp        : Pages in file
                        e_crlc      : Relocations
                        e_cparhdr   : Size of header in paragraphs
                        e_minalloc  : Minimum extra paragraphs needed
                        e_maxalloc  : Maximum extra paragraphs needed
                        e_ss        : Initial (relative) SS value
                        e_sp        : Initial SP value
                        e_csum      : Checksum
                        e_ip        : Initial IP value
                        e_cs        : Initial (relative) CS value
                        e_lfarlc    : File address of relocation table
                        e_ovno      : Overlay number
                        e_res[4]    : Reserved words
                        e_oemid     : OEM identifier (for e_oeminfo)
                        e_oeminfo   : OEM information; e_oemid specific
                        e_res2[10]  : Reserved words
                        e_lfanew    : File address of new exe header; This is
                                      the offset to locate the PE File Header
        NT_HEADERS:

        FILE_HEADER: This attribute actually refers to the _IMAGE_FILE_HEADER <https://msdn.microsoft.com/en-us/library/windows/desktop/ms680313(v=vs.85).aspx>
                    it contains this atributtes:

                        Machine                 : Especifies the target machine
                                                  of the file ({
                                                                0x014c, x86
                                                                0x0200, Intel Itanium
                                                                0x8664, x64
                                                                })
                        NumberOfSections        : The number of sections.
                                                  This indicates the size of the
                                                  section table, which
                                                  immediately follows the
                                                  headers.
                                                  Note that the Windows loader
                                                  limits the number of sections
                                                  to 96.
                        TimeDateStamp           : The low 32 bits of the time stamp
                                                  of the image. This represents
                                                  the date and time the image was
                                                  created by the linker.
                                                  The value is represented in
                                                  the number of seconds elapsed
                                                  since midnight (00:00:00),
                                                  January 1, 1970, Universal
                                                  Coordinated Time,
                                                  according to the system clock.
                        PointerToSymbolTable    : The offset of the symbol table,
                                                  in bytes, or zero if no COFF
                                                  symbol table exists.
                        NumberOfSymbols         : The number of symbols in the
                                                  symbol table.
                        SizeOfOptionalHeader    : The size of the optional
                                                  header, in bytes.
                                                  This value should be 0 for
                                                  object files.
                        Characteristics         :
