0x000000: 33 37 31 31 33 36 31 31 | 31 33 38 31 31 31 31 39 #Hex Dump Progra
0x000010: 31 31 31 31 31 31 31 31 | 31 33 39 31 31 31 39 31 m..import argpar
0x000020: 31 31 31 31 31 31 31 31 | 31 33 37 31 31 36 31 31 se....def HexDum
0x000030: 31 34 34 35 31 31 33 33 | 33 33 33 36 31 31 33 33 p():..    #@..  
0x000040: 33 33 31 39 31 31 31 31 | 33 36 33 39 31 31 31 39   parser = argpa
0x000050: 31 31 31 34 36 31 31 31 | 31 31 31 31 38 39 31 31 rse.ArgumentPars
0x000060: 31 31 34 34 31 31 33 33 | 33 33 31 39 31 31 31 31 er()..    parser
0x000070: 34 39 31 31 39 39 31 31 | 31 31 31 31 31 34 33 31 .add_argument("f
0x000080: 31 31 31 33 34 33 31 31 | 31 31 36 33 38 31 31 39 ile", help="Spec
0x000090: 31 31 31 33 37 31 31 31 | 33 34 31 31 33 33 33 33 ify File")..    
0x0000a0: 31 39 31 31 31 31 34 39 | 31 31 39 39 31 31 31 31 parser.add_argum
0x0000b0: 31 31 31 34 33 34 31 33 | 34 33 33 34 34 31 31 31 ent("-o", "--out
0x0000c0: 31 31 31 33 34 33 31 31 | 31 31 36 33 38 31 31 31 put", help="Prin
0x0000d0: 31 33 31 31 31 31 31 31 | 33 31 31 33 31 31 31 31 t output to term
0x0000e0: 31 31 39 31 33 39 31 31 | 33 33 33 33 33 33 33 33 inal"\..        
0x0000f0: 33 33 33 33 33 33 33 33 | 33 33 33 33 33 33 33 33                 
0x000100: 34 33 39 39 31 31 31 31 | 36 33 31 31 31 31 31 39 , action="store_
0x000110: 31 31 31 31 33 34 31 31 | 33 33 33 33 39 31 31 31 true")..    args
0x000120: 33 36 33 31 39 31 31 31 | 31 34 31 39 31 31 31 39  = parser.parse_
0x000130: 39 31 31 31 34 34 31 31 | 31 31 33 33 33 33 31 31 args()....    if
0x000140: 33 39 31 31 31 34 31 31 | 31 31 35 31 31 33 33 33  args.file:..   
0x000150: 33 33 33 33 33 31 31 31 | 31 31 31 33 36 33 34 31      offset = 0.
0x000160: 31 33 33 33 33 33 33 33 | 33 31 31 31 31 33 31 31 .        with op
0x000170: 31 31 34 39 31 31 31 34 | 31 31 31 31 34 33 33 31 en(args.file, 'r
0x000180: 39 33 34 33 39 31 33 31 | 31 31 31 31 31 35 31 31 b') as infile:..
0x000190: 33 33 33 33 33 33 33 33 | 33 33 33 33 31 31 31 31             with
0x0001a0: 33 31 31 31 31 34 39 31 | 31 31 34 31 31 31 31 34  open(args.file+
0x0001b0: 33 34 31 31 31 31 33 34 | 33 33 31 33 34 33 39 31 ".dump", 'w') as
0x0001c0: 33 31 31 31 31 31 31 31 | 35 31 31 33 33 33 33 33  outfile:..     
0x0001d0: 33 33 33 33 33 33 33 33 | 33 33 33 39 31 31 31 31            chunk
0x0001e0: 33 36 33 31 31 31 31 31 | 31 34 31 31 39 31 34 34  = infile.read(1
0x0001f0: 35 34 31 33 33 33 33 33 | 33 33 33 33 33 33 33 33 6).             
0x000200: 33 33 33 31 31 31 31 31 | 33 39 31 31 31 31 33 33    while chunk !
0x000210: 36 33 39 33 33 35 31 31 | 33 33 33 33 33 33 33 33 = b'':..        
0x000220: 33 33 33 33 33 33 33 33 | 33 33 33 33 31 31 33 31             if l
0x000230: 31 31 34 39 31 31 31 31 | 34 33 36 36 33 34 35 31 en(chunk) == 0:.
0x000240: 31 33 33 33 33 33 33 33 | 33 33 33 33 33 33 33 33 .               
0x000250: 33 33 33 33 33 33 33 33 | 33 39 31 31 39 31 31 31          break..
0x000260: 31 31 33 33 33 33 33 33 | 33 33 33 33 33 33 33 33 ..              
0x000270: 33 33 33 33 33 33 31 31 | 31 31 33 36 33 33 33 31       text = ''.
0x000280: 31 33 33 33 33 33 33 33 | 33 33 33 33 33 33 33 33 .               
0x000290: 33 33 33 33 33 31 31 31 | 33 31 33 31 31 33 39 31      for i in ch
0x0002a0: 31 31 31 35 31 31 33 33 | 33 33 33 33 33 33 33 33 unk:..          
0x0002b0: 33 33 33 33 33 33 33 33 | 33 33 33 33 33 33 31 31               if
0x0002c0: 33 31 33 36 33 34 35 35 | 33 39 31 31 33 31 33 36  i < 128 and i >
0x0002d0: 36 33 35 35 35 31 31 33 | 33 33 33 33 33 33 33 33 = 32:..         
0x0002e0: 33 33 33 33 33 33 33 33 | 33 33 33 33 33 33 33 33                 
0x0002f0: 33 33 33 31 31 31 31 33 | 36 33 31 31 31 31 33 34    text = text +
0x000300: 33 33 33 33 34 33 39 31 | 31 34 31 34 31 31 33 33  '' + chr(i)..  
0x000310: 33 33 33 33 33 33 33 33 | 33 33 33 33 33 33 33 33                 
0x000320: 33 33 33 33 33 33 31 31 | 31 31 35 31 31 33 33 33       else:..   
0x000330: 33 33 33 33 33 33 33 33 | 33 33 33 33 33 33 33 33                 
0x000340: 33 33 33 33 33 33 33 33 | 33 31 31 31 31 33 36 33          text = 
0x000350: 31 31 31 31 33 34 33 33 | 34 33 31 31 31 31 33 33 text + '.'....  
0x000360: 33 33 33 33 33 33 33 33 | 33 33 33 33 33 33 33 33                 
0x000370: 33 33 31 31 31 31 31 31 | 33 36 33 33 31 35 33 34   output = "{:#0
0x000380: 35 31 31 33 34 31 31 31 | 31 39 31 34 31 31 31 31 8x}".format(offs
0x000390: 31 31 34 33 34 33 33 35 | 33 33 31 31 33 33 33 33 et) + ": "..    
0x0003a0: 33 33 33 33 33 33 33 33 | 33 33 33 33 33 33 33 33                 
0x0003b0: 31 31 31 31 31 31 33 34 | 36 33 33 33 33 34 31 31 output += " ".jo
0x0003c0: 31 31 34 33 31 35 34 35 | 38 31 33 34 31 31 31 31 in("{:02X}".form
0x0003d0: 39 31 34 31 31 31 34 33 | 31 31 33 34 31 31 31 31 at(ord('{}'.form
0x0003e0: 39 31 34 39 34 39 34 39 | 34 34 33 31 31 31 33 39 at(c)[0])) for c
0x0003f0: 33 31 31 33 39 31 31 31 | 31 39 35 35 39 34 31 31  in chunk[:8])..
0x000400: 33 33 33 33 33 33 33 33 | 33 33 33 33 33 33 33 33                 
0x000410: 33 33 33 33 31 31 31 31 | 31 31 33 34 36 33 33 33     output += " 
0x000420: 31 33 33 31 31 33 33 33 | 33 33 33 33 33 33 33 33 | "..           
0x000430: 33 33 33 33 33 33 33 33 | 33 31 31 31 31 31 31 33          output 
0x000440: 34 36 33 33 33 33 34 31 | 31 31 31 34 33 31 35 34 += " ".join("{:0
0x000450: 35 38 31 33 34 31 31 31 | 31 39 31 34 31 31 31 34 2X}".format(ord(
0x000460: 33 31 31 33 34 31 31 31 | 31 39 31 34 39 34 39 34 '{}'.format(c)[0
0x000470: 39 34 34 33 31 31 31 33 | 39 33 31 31 33 39 31 31 ])) for c in chu
0x000480: 31 31 39 35 35 39 34 31 | 31 33 33 33 33 33 33 33 nk[8:])..       
0x000490: 33 33 33 33 33 33 33 33 | 33 33 33 33 33 31 31 33              if 
0x0004a0: 31 31 31 34 39 31 31 31 | 31 34 33 33 33 34 35 33 len(chunk) % 16 
0x0004b0: 33 36 33 34 35 31 31 33 | 33 33 33 33 33 33 33 33 != 0:..         
0x0004c0: 33 33 33 33 33 33 33 33 | 33 33 33 33 33 33 33 31                o
0x0004d0: 31 31 31 31 31 33 34 36 | 33 33 33 33 33 33 34 34 utput += "   "*(
0x0004e0: 34 35 33 34 33 31 31 31 | 34 39 31 31 31 31 34 34 16 - len(chunk))
0x0004f0: 33 34 33 31 31 31 31 31 | 31 33 33 33 33 33 33 33  + text..       
0x000500: 33 33 33 33 33 33 33 33 | 33 33 33 33 33 31 31 31              els
0x000510: 31 35 31 31 33 33 33 33 | 33 33 33 33 33 33 33 33 e:..            
0x000520: 33 33 33 33 33 33 33 33 | 33 33 33 33 31 31 31 31             outp
0x000530: 31 31 33 34 36 33 33 33 | 33 33 34 33 31 31 31 31 ut += " " + text
0x000540: 31 31 33 33 33 33 33 33 | 33 33 33 33 33 33 33 33 ..              
0x000550: 33 33 33 33 33 33 31 31 | 33 39 31 31 31 34 31 31       if args.ou
0x000560: 31 31 31 31 35 31 31 33 | 33 33 33 33 33 33 33 33 tput:..         
0x000570: 33 33 33 33 33 33 33 33 | 33 33 33 33 33 33 33 31                p
0x000580: 31 31 31 31 34 31 31 31 | 31 31 31 34 31 31 33 33 rint(output)..  
0x000590: 33 33 33 33 33 33 33 33 | 33 33 33 33 33 33 33 33                 
0x0005a0: 33 33 31 31 31 31 31 31 | 31 34 31 31 31 31 31 34   outfile.write(
0x0005b0: 31 31 31 31 31 31 33 34 | 33 33 39 31 33 34 31 31 output + '\n')..
0x0005c0: 31 31 33 33 33 33 33 33 | 33 33 33 33 33 33 33 33 ..              
0x0005d0: 33 33 33 33 33 33 31 31 | 31 31 31 31 33 34 36 33       offset += 
0x0005e0: 34 35 31 31 33 33 33 33 | 33 33 33 33 33 33 33 33 16..            
0x0005f0: 33 33 33 33 33 33 33 33 | 39 31 31 31 31 33 36 33         chunk = 
0x000600: 31 31 31 31 31 31 34 31 | 31 39 31 34 34 35 34 31 infile.read(16).
0x000610: 31 33 33 33 33 31 31 31 | 31 35 31 31 33 33 33 33 .    else:..    
0x000620: 33 33 33 33 31 31 31 31 | 31 34 31 39 31 31 31 31     print(parser
0x000630: 34 31 31 39 31 31 34 31 | 31 31 31 31 31 33 39 39 .usage)....if __
0x000640: 31 39 31 31 39 39 33 36 | 36 33 33 39 39 31 39 31 name__ == '__mai
0x000650: 31 39 39 33 35 31 31 33 | 33 33 33 37 31 31 36 31 n__':..    HexDu
0x000660: 31 31 34 34 31 31 |                               mp()..
